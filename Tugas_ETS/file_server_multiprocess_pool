from socket import socket, AF_INET, SOCK_STREAM, SOL_SOCKET, SO_REUSEADDR
import logging
import sys
from concurrent.futures import ProcessPoolExecutor
import multiprocessing # For freeze_support

from file_protocol import FileProtocol
fp = FileProtocol()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(processName)s - %(message)s')

def handle_client_connection(connection, address):
    logging.info(f"Connection from {address}")
    data_received_buffer = ""
    try:
        while True:
            data_chunk = connection.recv(4096) 
            if not data_chunk:
                break
            data_received_buffer += data_chunk.decode()
            if "\r\n\r\n" in data_received_buffer:
                message_to_process, _, rest_of_buffer = data_received_buffer.partition("\r\n\r\n")
                data_received_buffer = rest_of_buffer

                cleaned_message = message_to_process
                logging.info(f"Processing data from {address}: {cleaned_message[:100]}...")
                
                response_data_json = fp.proses_string(cleaned_message)
                response_with_delimiter = response_data_json + "\r\n\r\n"
                connection.sendall(response_with_delimiter.encode())
                break 
            
    except Exception as e:
        logging.error(f"Error handling client {address}: {e}")
    finally:
        logging.info(f"Closing connection from {address}")
        connection.close()

class Server:
    def __init__(self, ip_address='0.0.0.0', port=50000, num_workers=5):
        self.ip_address = ip_address
        self.port = port
        self.num_workers = num_workers
        self.server_socket = socket(AF_INET, SOCK_STREAM)
        self.server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)

    def start(self):
        try:
            self.server_socket.bind((self.ip_address, self.port))
            self.server_socket.listen(self.num_workers * 2 if self.num_workers > 0 else 50) 
            logging.info(f"Server listening on {self.ip_address}:{self.port} with {self.num_workers} worker processes (ProcessPool)")

            with ProcessPoolExecutor(max_workers=self.num_workers if self.num_workers > 0 else None) as executor:
                while True:
                    try:
                        connection, client_address = self.server_socket.accept()
                        if self.num_workers == 0: # Emulate single-process behavior for testing worker=0
                             handle_client_connection(connection, client_address)
                        else:
                            executor.submit(handle_client_connection, connection, client_address)
                    except OSError as e:
                        logging.error(f"Error accepting connection: {e}")
                        break 
        except Exception as e:
            logging.error(f"Server failed to start or encountered a critical error: {e}")
        finally:
            self.server_socket.close()
            logging.info("Server (ProcessPool) shutdown.")

def main():
    server_pool_size_default = 5
    server_port_default = 50000

    server_pool_size = int(sys.argv[1]) if len(sys.argv) > 1 else server_pool_size_default
    server_port = int(sys.argv[2]) if len(sys.argv) > 2 else server_port_default
    
    if server_pool_size < 0:
        logging.warning(f"Server pool size cannot be negative. Using default: {server_pool_size_default}")
        server_pool_size = server_pool_size_default

    server_instance = Server(port=server_port, num_workers=server_pool_size)
    server_instance.start()

if __name__ == "__main__":
    multiprocessing.freeze_support()
    main()
